'use strict';

class HandlerInvoker {
  /**
   * @param {WeakMap} WeakMap Maps exports to a set of run handlers
   */
  constructor(seen = new WeakMap()) {
    this.seen = seen;
  }

  /**
   * Filters a collection of handlers to those which have not run for the
   * provided export.
   * @param {Function[]} handlers Collection of handlers
   * @param {*} xport The exported module
   * @returns {*}
   */
  filter(handlers, xport) {
    if (!xport || (typeof xport !== 'object' && typeof xport !== 'function')) {
      return [];
    }

    const seen = this.seen.get(xport);

    if (!seen) {
      const handlerSet = new WeakSet(handlers);
      this.seen.set(xport, handlerSet);
      return handlers;
    }

    return handlers.filter((handler) => {
      if (seen.has(handler)) {
        return false;
      } else {
        seen.add(handler);
        return true;
      }
    });
  }

  /**
   * Invoke all handlers in the provided collection that have not yet been run
   * for the provided export value.
   * @param {Function[]} handlers The handlers to invoke
   * @param {Object} metadata Export metadata to pass to the handlers
   * @param {*} xport The exported module
   * @returns {*}
   */
  invoke(handlers, xport, metadata) {
    const newHandlers = this.filter(handlers, xport);
    const rv = newHandlers.reduce(
      (acc, handler) => handler(acc, metadata) || acc,
      xport
    );
    if (typeof rv == 'function' && rv != xport) {
      this.seen.set(rv, this.seen.get(xport));
    }
    return rv;
  }

  reset(xport) {
    this.seen.delete(xport);
  }
}

module.exports = HandlerInvoker;
