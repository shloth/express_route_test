'use strict';

const Semver = require('semver');

const DEFAULT_VERSION = '>=0.0.0';

class ExportHookDescriptor {
  /**
   * Export information and function handlers that should be invoked when the
   * export is returned by a `require` call.
   * @param {Object} options
   * @param {String} options.file
   * @param {String} options.name
   * @param {Function[]} options.handlers
   * @param {String} options.version
   */
  constructor({
    name = null,
    file = null,
    handlers = [],
    version = DEFAULT_VERSION
  } = {}) {
    ExportHookDescriptor.validate({ name, file, handlers, version });
    this.file = file;
    this.name = name;
    this.version = version;
    this.handlers = handlers;
  }

  /**
   * Validates the constructor params.
   * @param {Name} name Name is required
   * @param {String} version Must be valid semver range
   * @throws {Error}
   */
  static validate({ name, version }) {
    if (!name) {
      throw new Error('Required option missing: `name`');
    }
    if (!Semver.validRange(version)) {
      throw new Error(`Invalid version: \`${version || 'undefined'}\``);
    }
  }

  /**
   * A static factory function
   * @param {String|Object} descriptor The export info and handlers
   * @returns {ExportDescriptor}
   */
  static create(...args) {
    const [descriptor] = args;
    if (typeof descriptor === 'string') {
      return Reflect.construct(ExportHookDescriptor, [{ name: descriptor }]);
    } else {
      return Reflect.construct(ExportHookDescriptor, args);
    }
  }
}

module.exports = ExportHookDescriptor;
module.exports.DEFAULT_VERSION = DEFAULT_VERSION;
